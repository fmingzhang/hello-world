// node.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <string.h>
#include <stdlib.h>
#define MAX 7
#define QUEUE_SIZE 8
//数组 a[5]-->a[0~4]
typedef struct
{
	char vertexs[MAX];
	int vertexnum,edgenum;
    int matrix[MAX][MAX];
}Graph;
//queue define
typedef struct
{
	int front,rear;
    int *base;
	
}Queue;



//function declare
void graph();
void creategraph(Graph *g);
int getpos();
void DFS(Graph *g,int k);
void BFS(Graph *g);
void initQueue(Queue *q);
void EnQueue(Queue *q,int e);
void DeQueue(Queue *q);

//QUEUE
void initQueue(Queue *q)
{
	q->base=(int*)malloc(QUEUE_SIZE*sizeof(int));
	q->front=0;
	q->rear=0;
	
	
}
void EnQueue(Queue *q,int e)
{
	if(q->rear==8)
	{printf("full");}
	else
		
	{
		q->base[q->rear]=e;
		q->rear++;
	}
	
	
}
void DeQueue(Queue *q)
{
	if(q->front==q->rear)
	{printf("empty");}
	else
	{q->front++;}
	
	
	
}



void graph()
{
	printf("\n");
	printf("   A");printf("-----");printf("F");printf("-----");printf("G");printf("-----");printf("E");printf("\n");
    printf("   |");printf(" \\");printf("\n");printf("   |");printf("   \\");printf("\n");printf("   |");printf("     \\");printf("\n");
    printf("   C");printf("------");printf("D");printf("\n");
	printf("   |");printf("\n");printf("   |");printf("\n");printf("   |");printf("\n");
    printf("   B");printf("\n");
	
}
int getpos(Graph *g)
{
	int n;
	char m;
    fflush(stdin);//clear the buffer of scanf
	scanf("%c",&m);
	for(n=0;n<g->vertexnum;n++)
	{
		if(m==g->vertexs[n])
		{return n;}
		
	}
	
	return -1;
	
}
void creategraph(Graph *g)
{
	int v,e,a,p1,p2;
	//int num[14];
	char vex[]={'A','B','C','D','E','F','G'};
	//matrix ³õÊ¼»¯ÎªÁã
	memset(g->matrix,0,sizeof(g->matrix));
	printf("input vertex number:");
	scanf("%d",&v);
	printf("input edge number:");
	scanf("%d",&e);
	g->vertexnum=v;
	g->edgenum=e;
	for(a=0;a<g->vertexnum;a++)
    {
		g->vertexs[a]=vex[a];
    }
	//for(d=0;d<14;d++)
	// {num[d]=getpos(g);}
	
    for(a=0;a<v;a++)
	{
		
		p1=getpos(g);
		p2=getpos(g);
		g->matrix[p1][p2]=1;
		g->matrix[p2][p1]=1;	
	}
}
//
int visited[MAX]={0};


void DFS(Graph *g,int k)
{
	int i;
	
	printf("%c",g->vertexs[k]);
	visited[k]=1;
	for(i=0;i<g->vertexnum;i++)
	{
		if(visited[i]==0&&g->matrix[k][i]==1)
		{DFS(g,i);}
	}
}

void BFS(Graph *g)
{
	Queue *qq,qqq;
	qq=&qqq;
	initQueue(qq);
	int visited[MAX]={0};
	int n,j;
	EnQueue(qq,0);
	
    while((qq->rear)-(qq->front)!=0)
	{
		n=qq->base[qq->front];
		//avoid repeat enqueue
		if(visited[n]==0)
		{printf("%c",g->vertexs[n]);}
		visited[n]=1;
		DeQueue(qq);
		for(j=0;j<g->vertexnum;j++)
		{
			if(visited[j]==0&&g->matrix[n][j]==1)
			{
				EnQueue(qq,j);
				
			}
			
		}
		
	}
	
}



void main(int argc, char* argv[])
{
	
	//printf("\n");
	//	int j,s;
	Graph *gg,ggg;
	
	gg=&ggg;
	
	graph();
	creategraph(gg);
	
	//test cerategraph
	/*  for(j=0;j<7;j++)
	{
	for(s=0;s<7;s++)
	{ 
		  printf("%d",gg->matrix[j][s]);
		  }
		  printf("\n");
		  }
	*/
	//DFS(gg,0);
	//printf("\n");
	
	BFS(gg);
	printf("\n");
}
